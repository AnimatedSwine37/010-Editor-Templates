//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: p5_tbl.bt
//   Authors: TGE
//   Version: 1.1
//   Purpose: Parse Persona 5 Table files.
//  Category: Table
// File Mask: *.tbl, *.pac
//  ID Bytes: 
//   History: 
//   1.0 - Initial release
//   1.1 - Parse tables from within table.pac, add enums for battle skills and units, misc changes
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "p5_enums.bt"

//---------------------------------------------
// Type definition
//---------------------------------------------
typedef byte u8;
typedef ushort u16;
typedef uint u32;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
} b8;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
} b16;

typedef struct
{
    u8 bit0 : 1;
    u8 bit1 : 1;
    u8 bit2 : 1;
    u8 bit3 : 1;
    u8 bit4 : 1;
    u8 bit5 : 1;
    u8 bit6 : 1;
    u8 bit7 : 1;
    u8 bit8 : 1;
    u8 bit9 : 1;
    u8 bit10 : 1;
    u8 bit11 : 1;
    u8 bit12 : 1;
    u8 bit13 : 1;
    u8 bit14 : 1;
    u8 bit15 : 1;
    u8 bit16 : 1;
    u8 bit17 : 1;
    u8 bit18 : 1;
    u8 bit19 : 1;
    u8 bit20 : 1;
    u8 bit21 : 1;
    u8 bit22 : 1;
    u8 bit23 : 1;
    u8 bit24 : 1;
    u8 bit25 : 1;
    u8 bit26 : 1;
    u8 bit27 : 1;
    u8 bit28 : 1;
    u8 bit29 : 1;
    u8 bit30 : 1;
    u8 bit31 : 1;
} b32;

//---------------------------------------------
// Helper functions
//---------------------------------------------
local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;
 
uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

void DetectEndianness()
{
    // Test endianness
    LittleEndian();
    local uint sizeTest = ReadUInt();
    if ( sizeTest & 0xFF000000 )
        BigEndian();
}

u32 Align( u32 value, u32 alignment )
{
	return (value + (alignment - 1)) & ~(alignment - 1);
}

void FAlign( u32 alignment )
{
	FSeek( Align( FTell(), alignment ) );
}

//---------------------------------------------
// Define structures
//---------------------------------------------

// Persona
typedef struct
{
    b16 Flags1;
    u8 Arcana;
    u8 Level;
    u8 Strength;
    u8 Magic;
    u8 Endurance;
    u8 Agility;
    u8 Luck;
    u8 Unused;
    b16 Flags2;
    u16 Unknown;
} TPersonaStats;

local u32 personaSkillSetIndex = 0;
typedef struct
{
    u8 Strength;
    u8 Magic;
    u8 Endurance;
    u8 Agility;
    u8 Luck;
    u8 Unused;

    struct
    {        
        u8 PendingLevels;
        u8 Unknown; 
        BattleSkill Skill;  
    } PersonaSkill[ 16 ];

} TPersonaSkillSet;

typedef struct
{
    u32 Thresholds[ 98 ];
} TPersonaLevelUpThresholds;

// Elsai
typedef struct
{
    u16 Unused;
    u16 AiId; // All I know about this value is that if it's not 0, it causes the game to load an AI script for this enemy
    u32 Unknown[ 10 ];
} TElsaiSegment1Entry;

typedef struct
{
    u8 Data[ 320 ];
} TElsaiSegment2Entry;

// Encounter
typedef struct
{
    b32 Flags;
    u16 Field04;
    u16 Field06;
    BattleUnit Units[ 5 ];
    u16 FieldId;
    u16 RoomId;
    u16 MusicId;
} TEncounter;

// Unit table
typedef struct
{
    b16 Flags;
    u8 ArcanaId;
    u8 Unknown1[ 2 ];
    u8 Level;
    u8 Unknown2[ 2 ];
    u32 Hp;
    u32 Sp;
    u8 Strength;
    u8 Magic;
    u8 Endurance;
    u8 Agility;
    u8 Luck;
    u8 Unknown3;
    BattleSkill SkillIds[ 8 ];
    u16 ExpReward;
    u16 MoneyReward;
    u16 Unknown4;
    u16 Unknown5;
    u8 Unknown6[ 18 ];
    b16 Unknown7;
    u16 AttackDamage;
} TUnitStats;

typedef struct
{
    u32 Values[ 10 ];
    //u16 Values[ 20 ]; // uncomment this if you want them to be shorts
} TUnitSegment2Entry;

typedef struct
{
    u32 Values[ 6 ];
    //u16 Values[ 12 ]; // uncomment this if you want them to be shorts
} TUnitSegment3Entry;

typedef struct
{
    u16 ShadowIndex;
    u16 ModelIndex;
} TUnitVisualIndex;


//---------------------------------------------
// Parse file structure
//---------------------------------------------
enum TableSegmentType
{
    TableSegmentType_Unknown,
    TableSegmentType_Persona_Stats,
    TableSegmentType_Persona_SkillSets,
    TableSegmentType_Persona_LevelUpThresholds,
    TableSegmentType_Elsai_Segment0,
    TableSegmentType_Elsai_Segment1,
    TableSegmentType_Encounter,
    TableSegmentType_Unit_Stats,
    TableSegmentType_Unit_Segment1,
    TableSegmentType_Unit_Segment2,
    TableSegmentType_Unit_Segment3,
    TableSegmentType_Unit_VisualIndex,
};

typedef struct( TableSegmentType _type )
{
    uint Size;
    local TableSegmentType type = _type; // for debugging

    switch ( type )
    {
        case TableSegmentType_Persona_Stats:
            TPersonaStats Stats[ Size / sizeof( TPersonaStats ) ];
            break;

        case TableSegmentType_Persona_SkillSets:
            TPersonaSkillSet SkillSets[ Size / sizeof( TPersonaSkillSet ) ];
            break;

        case TableSegmentType_Persona_LevelUpThresholds:
            TPersonaLevelUpThresholds LevelUpThresholds[ Size / sizeof( TPersonaLevelUpThresholds ) ];
            break;

        case TableSegmentType_Elsai_Segment0:
            TElsaiSegment1Entry Entries[ Size / sizeof( TElsaiSegment1Entry ) ];
            break;

        case TableSegmentType_Elsai_Segment1:
            TElsaiSegment2Entry Entries[ Size / sizeof( TElsaiSegment2Entry ) ];
            break;

        case TableSegmentType_Encounter:
            TEncounter TEncounters[ Size / sizeof( TEncounter ) ];
            break;

        case TableSegmentType_Unit_Stats:
            TUnitStats Stats[ Size / sizeof( TUnitStats ) ];
            break;

        case TableSegmentType_Unit_Segment1:
            TUnitSegment2Entry Entries[ Size / sizeof( TUnitSegment2Entry ) ];
            break;

        case TableSegmentType_Unit_Segment3:
            TUnitSegment3Entry Entries[ Size / sizeof( TUnitSegment3Entry ) ];
            break;

        case TableSegmentType_Unit_VisualIndex:
            TUnitVisualIndex VisualIndices[ Size / sizeof( TUnitVisualIndex ) ];
            break;

        default:
            byte Data[ Size ];
    }
    
    FAlign( 16 );
} TTableSegment <read=TableSegmentToString>;

string TableSegmentToString( TTableSegment& segment )
{
    return EnumToString( segment.type );
}

typedef struct( string tableName, u32 endOffset )
{
    local int segmentIndex = 0;
    local TableSegmentType segmentType;

    while ( FTell() < endOffset )
    {
        segmentType = TableSegmentType_Unknown;
        if ( !Stricmp( tableName, "persona" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Persona_Stats; break;
                case 1: segmentType = TableSegmentType_Persona_SkillSets; break;
                case 2: segmentType = TableSegmentType_Persona_LevelUpThresholds; break;
            }
        }
        else if ( !Stricmp( tableName, "elsai" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Elsai_Segment0; break;
                case 1: segmentType = TableSegmentType_Elsai_Segment1; break;
            }
        } 
        else if ( !Stricmp( tableName, "encount" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Encounter; break;
            }
        }
        else if ( !Stricmp( tableName, "unit" ) )
        {
            switch ( segmentIndex )
            {
                case 0: segmentType = TableSegmentType_Unit_Stats; break;
                case 1: segmentType = TableSegmentType_Unit_Segment1; break;
                case 2: segmentType = TableSegmentType_Unit_Segment2; break;
                case 3: segmentType = TableSegmentType_Unit_Segment3; break;
                case 4: segmentType = TableSegmentType_Unit_VisualIndex; break;
            }
        }

        Printf( "%s\n", EnumToString( segmentType ) );
        SetBackColor( MyRandom( 0xFFFFFFFF ) );
        TTableSegment Segment( segmentType );

        ++segmentIndex;
    }

} TTable;

typedef struct
{
    LittleEndian();
    char FileName[ 252 ];
    u32 FileSize;

    if ( Stricmp( FileNameGetExtension( FileName ), ".tbl" ) == 0 )
    {
        BigEndian();
        TTable Table( FileNameGetBase( FileName, false ), FTell() + FileSize ); 
    }
    else
    {
        u8 Data[ FileSize ];
    }

    FAlign( 64 );  
} TFile <read=FileToString>; 

string FileToString( struct TFile& file )
{
    return file.FileName;
}


// Read table
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".pac" ) == 0 )
{
    // table.pac
    while ( !FEof() )
    {
        TFile File;
    }
}
else if ( Stricmp( fileExt, ".tbl" ) == 0 )
{
    // tbl file
    BigEndian();
    TTable Table( fileName, FileSize() );
}