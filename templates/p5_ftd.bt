//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: p5_ftd.bt
//   Authors: TGE
//   Version: 1.0
//   Purpose: Parse Persona 5 FTD files
//  Category: 
// File Mask: *.ftd
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../common/include.h"

typedef struct( string fileName )
{
    SetRandomBackColor();
    local u32 tableStart = FTell();
    
    // Detect endianness
    BigEndian();
    local u32 magic = ReadUInt( tableStart + 4 );
    if ( magic != 0x46544430 )
    {
        if ( magic == 0x30445446 )
        {
            LittleEndian();
        }
        else
        {
            Assert( false, "Invalid magic" );
        }
    }

    u32 Field00;
    u32 Magic;
    u32 FileSize;
    u16 DataType;
    u16 DataCount;
    u32 DataOffsets[ DataCount ];
    
    local u32 x;
    local u32 y;
    for ( x = 0; x < DataCount; ++x )
    {
        FSeek( tableStart + DataOffsets[x] );
        
        if ( DataType == 0 ) struct FtdList List( fileName );
        else if ( DataType == 1 ) struct FtdString Data;
    }
} FtdTable;

enum<u16> FtdListType
{
    FtdListType_DataEntries,
    FtdListType_EmbeddedFtd
};

typedef struct( string fileName )
{
    SetRandomBackColor();

    u32 Field00;        Assert( Field00 == 0 );
    u32 DataSize;
    u32 EntryCount;
    FtdListType EntryType;
    u16 Field0E;
    
    if ( EntryCount > 0 )
    {
        if ( EntryType == FtdListType_DataEntries )
        {
            local u32 entrySize = DataSize / EntryCount;
            Assert( ( entrySize * EntryCount ) == DataSize );
            struct FtdListEntry Entry( entrySize, fileName )[ EntryCount ];
        }
        else if ( EntryType == FtdListType_EmbeddedFtd )
        {
            FtdTable Table( fileName );
        }
    }
} FtdList;

typedef struct( u32 entrySize, string fileName )
{
    SetRandomBackColor();

    switch ( fileName )
    {
        default: 
            u8 Data[ entrySize ]; 
            break;
    }
    
} FtdListEntry <read=FtdListEntryToString, write=FtdListEntryFromString, optimize=false>;

string FtdListEntryToString( struct FtdListEntry& entry )
{
    return entry.Data;
}

void FtdListEntryFromString( struct FtdListEntry& entry, string value )
{
    entry.Data = value;
}

// Field strings
typedef struct
{
    SetRandomBackColor();
    u8 Length;
    u8 Field01;
    u8 Field02; Assert( Field02 == 0 );
    u8 Field03; Assert( Field03 == 0 );
    u8 Data[ Align( Length, 16 ) ];
} FtdString <read=FtdStringToString, write=FtdStringFromString>;

string FtdStringToString( struct FtdString& str )
{
    return str.Data;
}

void FtdStringFromString( struct FtdString& str, string value )
{
    str.Length = Strlen( value ) + 1;
    str.Data = value;
}

enum EArchiveFormat
{
    EArchiveFormat_1,
    EArchiveFormat_2
};

typedef struct
{
    SetRandomBackColor();

    local u32 archiveBase = FTell();
    local EArchiveFormat archiveFormat = EArchiveFormat_1;

    if ( ReadByte( archiveBase ) == 0 )
        archiveFormat = EArchiveFormat_2;

    if ( archiveFormat == EArchiveFormat_1 )
    {
        while ( !FEof() )
            struct TFile File( archiveFormat );
    }
    else
    {
        BigEndian();
        u32 FileCount;
        struct TFile File( archiveFormat )[ FileCount ];
    }
} TArchive;

typedef struct( EArchiveFormat format )
{
    if ( format == EArchiveFormat_1 )
    {
        LittleEndian();
        char FileName[ 252 ];
    }
    else
    {
        BigEndian();
        char FileName[ 32 ];
    }

    u32 FileSize;
    local u32 fileStart = FTell();
    local string fileExt = FileNameGetExtension( FileName );

    if ( Stricmp( fileExt, ".ftd" ) == 0 || 
         Stricmp( fileExt, ".ctd" ) == 0 ||
         Stricmp( fileExt, ".ttd" ) == 0 )
    {
        FtdTable Table( FileNameGetBase( FileName, false ) ); 
    }
    else if ( Stricmp( fileExt, ".bin" ) == 0 || Stricmp( fileExt, ".pak" ) == 0  )
    {
        TArchive Archive;
    }
    else
    {
        u8 Data[ FileSize ];
    }

    FSeek( fileStart + FileSize );

    if ( format == EArchiveFormat_1 )
    {
        FAlign( 64 );
    }
} TFile <read=FileToString, optimize=false>; 

string FileToString( struct TFile& file )
{
    return file.FileName;
}

// Read file
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".bin" ) == 0 ||
     Stricmp( fileExt, ".pak" ) == 0 ||
     Stricmp( fileExt, ".pac" ) == 0 )
{
    TArchive Archive;
}
else
{
    // ftd file
    FtdTable Table( fileName );
}